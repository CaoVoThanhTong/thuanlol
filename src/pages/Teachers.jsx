import React, { useState, useMemo } from 'react';
import { teachersData } from '../data/teachers';
import './Teachers.css';

const Teachers = ({ setShowBookingModal, setSelectedTeacher }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedSpecialty, setSelectedSpecialty] = useState('');
  const [priceRange, setPriceRange] = useState('');
  const [sortBy, setSortBy] = useState('rating');

  // L·∫•y danh s√°ch chuy√™n ng√†nh duy nh·∫•t
  const specialties = useMemo(() => {
    const allSpecialties = teachersData.map(teacher => teacher.specialty);
    return [...new Set(allSpecialties)];
  }, []);

  // L·ªçc v√† s·∫Øp x·∫øp gi√°o vi√™n
  const filteredTeachers = useMemo(() => {
    let filtered = teachersData.filter(teacher => {
      // T√¨m ki·∫øm theo t√™n ho·∫∑c chuy√™n ng√†nh
      const matchesSearch = teacher.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           teacher.specialty.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           teacher.description.toLowerCase().includes(searchTerm.toLowerCase());
      
      // L·ªçc theo chuy√™n ng√†nh
      const matchesSpecialty = !selectedSpecialty || teacher.specialty === selectedSpecialty;
      
      // L·ªçc theo kho·∫£ng gi√°
      let matchesPrice = true;
      if (priceRange) {
        const price = parseInt(teacher.price.replace(/[^\d]/g, ''));
        switch (priceRange) {
          case 'low':
            matchesPrice = price < 300000;
            break;
          case 'medium':
            matchesPrice = price >= 300000 && price <= 350000;
            break;
          case 'high':
            matchesPrice = price > 350000;
            break;
          default:
            matchesPrice = true;
        }
      }
      
      return matchesSearch && matchesSpecialty && matchesPrice;
    });

    // S·∫Øp x·∫øp
    filtered.sort((a, b) => {
      switch (sortBy) {
        case 'rating':
          return b.rating - a.rating;
        case 'price-low':
          return parseInt(a.price.replace(/[^\d]/g, '')) - parseInt(b.price.replace(/[^\d]/g, ''));
        case 'price-high':
          return parseInt(b.price.replace(/[^\d]/g, '')) - parseInt(a.price.replace(/[^\d]/g, ''));
        case 'name':
          return a.name.localeCompare(b.name);
        default:
          return 0;
      }
    });

    return filtered;
  }, [searchTerm, selectedSpecialty, priceRange, sortBy]);

  const handleBookingClick = (teacher) => {
    setSelectedTeacher(teacher);
    setShowBookingModal(true);
  };

  const clearFilters = () => {
    setSearchTerm('');
    setSelectedSpecialty('');
    setPriceRange('');
    setSortBy('rating');
  };

  return (
    <div className="teachers">
      <div className="container">
        <div className="teachers-header">
          <h1>ƒê·ªôi ng≈© gi√°o vi√™n ch·∫•t l∆∞·ª£ng</h1>
          <p>Ch·ªçn gi√°o vi√™n ph√π h·ª£p v·ªõi m·ª•c ti√™u h·ªçc t·∫≠p c·ªßa b·∫°n</p>
        </div>
        
        {/* T√¨m ki·∫øm v√† L·ªçc */}
        <div className="teachers-filters">
          <div className="search-box">
            <input
              type="text"
              placeholder="T√¨m ki·∫øm gi√°o vi√™n theo t√™n, chuy√™n ng√†nh..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="search-input"
            />
            <span className="search-icon">üîç</span>
          </div>
          
          <div className="filter-row">
            <div className="filter-group">
              <label>Chuy√™n ng√†nh:</label>
              <select 
                value={selectedSpecialty} 
                onChange={(e) => setSelectedSpecialty(e.target.value)}
                className="filter-select"
              >
                <option value="">T·∫•t c·∫£ chuy√™n ng√†nh</option>
                {specialties.map(specialty => (
                  <option key={specialty} value={specialty}>{specialty}</option>
                ))}
              </select>
            </div>
            
            <div className="filter-group">
              <label>Kho·∫£ng gi√°:</label>
              <select 
                value={priceRange} 
                onChange={(e) => setPriceRange(e.target.value)}
                className="filter-select"
              >
                <option value="">T·∫•t c·∫£ m·ª©c gi√°</option>
                <option value="low">D∆∞·ªõi 300.000 VNƒê</option>
                <option value="medium">300.000 - 350.000 VNƒê</option>
                <option value="high">Tr√™n 350.000 VNƒê</option>
              </select>
            </div>
            
            <div className="filter-group">
              <label>S·∫Øp x·∫øp:</label>
              <select 
                value={sortBy} 
                onChange={(e) => setSortBy(e.target.value)}
                className="filter-select"
              >
                <option value="rating">ƒê√°nh gi√° cao nh·∫•t</option>
                <option value="price-low">Gi√° th·∫•p ƒë·∫øn cao</option>
                <option value="price-high">Gi√° cao ƒë·∫øn th·∫•p</option>
                <option value="name">T√™n A-Z</option>
              </select>
            </div>
            
            <button 
              onClick={clearFilters}
              className="clear-filters-btn"
            >
              X√≥a b·ªô l·ªçc
            </button>
          </div>
          
          <div className="results-info">
            <span>T√¨m th·∫•y {filteredTeachers.length} gi√°o vi√™n ph√π h·ª£p</span>
          </div>
        </div>
        
        <div className="teachers-grid">
          {filteredTeachers.length > 0 ? (
            filteredTeachers.map((teacher) => (
            <div key={teacher.id} className="teacher-card">
              <div className="teacher-avatar">
                <img src={teacher.avatar} alt={teacher.name} />
                <div className="rating">
                  <span>‚≠ê {teacher.rating}</span>
                </div>
              </div>
              
              <div className="teacher-info">
                <h3>{teacher.name}</h3>
                <div className="specialty">{teacher.specialty}</div>
                <div className="experience">{teacher.experience}</div>
                <p className="description">{teacher.description}</p>
                <div className="price">{teacher.price}</div>
              </div>
              
              <div className="teacher-actions">
                <button 
                  className="book-trial-btn"
                  onClick={() => handleBookingClick(teacher)}
                >
                  ƒê·∫∑t l·ªãch h·ªçc th·ª≠
                </button>
              </div>
            </div>
          ))
        ) : (
          <div className="no-results">
            <div className="no-results-icon">üòî</div>
            <h3>Kh√¥ng t√¨m th·∫•y gi√°o vi√™n ph√π h·ª£p</h3>
            <p>Th·ª≠ thay ƒë·ªïi b·ªô l·ªçc ho·∫∑c t·ª´ kh√≥a t√¨m ki·∫øm c·ªßa b·∫°n</p>
            <button onClick={clearFilters} className="reset-filters-btn">
              ƒê·∫∑t l·∫°i b·ªô l·ªçc
            </button>
          </div>
        )}
        </div>
        
        <div className="teachers-cta">
          <h2>Kh√¥ng t√¨m th·∫•y gi√°o vi√™n ph√π h·ª£p?</h2>
          <p>Li√™n h·ªá v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n v√† gi·ªõi thi·ªáu gi√°o vi√™n ph√π h·ª£p nh·∫•t</p>
          <button className="contact-btn">Li√™n h·ªá t∆∞ v·∫•n</button>
        </div>
      </div>
    </div>
  );
};

export default Teachers;
